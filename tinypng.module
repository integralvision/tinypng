<?php

/**
 * @file
 * TinyPng module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\image\ImageStyleInterface;

/**
 * Implements hook_entity_presave().
 *
 * Process the image with TinyPNG service.
 */
function tinypng_entity_presave(EntityInterface $entity) {
  // Handle only newly uploaded images.
  if (
    !$entity->isNew()
    || $entity->getEntityTypeId() != 'file'
    || !empty(file_validate_is_image($entity))
  ) {
    return;
  }

  /** @var \Drupal\file\Entity\File $entity */
  if (!tinypng_is_mime_supported($entity->getMimeType())) {
    return;
  }

  // Skip if no api key is set or OnUpload method is not enabled.
  $api_key = tinypng_api_key();
  $on_upload = tinypng_handle_on_upload();
  if (empty($api_key) || empty($on_upload)) {
    return;
  }

  /** @var \Drupal\tinypng\TinyPng $tinypng */
  $tinypng = \Drupal::service('tinypng.compress');

  // Compress image.
  $image_path = $entity->getFileUri();
  try {
    if (tinypng_on_upload_method() == 'download') {
      $tinypng->setFromUrl($image_path);
    }
    else {
      $tinypng->setFromFile($image_path);
    }

    $tinypng->saveTo($image_path);
  }
  catch (Exception $ex) {
    \Drupal::logger('tinypng')->error($ex->getMessage());
  }
}

/**
 * Get TinyPNG API key.
 */
function tinypng_api_key() {
  $config = \Drupal::config('tinypng.settings');
  return $config->get('api_key');
}

/**
 * Check ImageAction mode is enabled.
 */
function tinypng_handle_with_image_actions() {
  $config = \Drupal::config('tinypng.settings');
  return (bool) $config->get('image_action');
}

/**
 * Check OnUpload mode is enabled.
 */
function tinypng_handle_on_upload() {
  $config = \Drupal::config('tinypng.settings');
  return (bool) $config->get('on_upload');
}

/**
 * Get OnUpload method.
 */
function tinypng_on_upload_method() {
  $config = \Drupal::config('tinypng.settings');
  return $config->get('upload_method');
}

/**
 * Check mime type is supported.
 */
function tinypng_is_mime_supported($mime) {
  $supported_types = [
    'image/png',
    'image/jpg',
    'image/jpeg',
  ];
  return in_array($mime, $supported_types);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tinypng_form_image_style_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!tinypng_api_key() || !tinypng_handle_with_image_actions()) {
    return;
  }

  /** @var \Drupal\image\Form\ImageStyleEditForm $form_object */
  $form_object = $form_state->getFormObject();

  /** @var \Drupal\image\Entity\ImageStyle $image_style */
  $image_style = $form_object->getEntity();

  $form['tinypng_compress'] = [
    '#type' => 'checkbox',
    '#title' => t('Compress with TinyPNG', [], ['context' => 'tinypng']),
    '#default_value' => $image_style->getThirdPartySetting('tinypng', 'tinypng_compress'),
    '#weight' => $form['effects']['#weight'] + 0.1,
  ];
  $form['#entity_builders'][] = 'tinypng_image_style_edit_form_builder';
}

/**
 * Entity form builder to add the TinyPNG settings to ImageStyle.
 *
 * @param string $entity_type_id
 *   Entity type ID.
 * @param \Drupal\image\ImageStyleInterface $image_style
 *   Edited ImageStyle instance.
 * @param array $form
 *   Entity form to alter.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function tinypng_image_style_edit_form_builder($entity_type_id, ImageStyleInterface $image_style, array &$form, FormStateInterface $form_state) {
  $image_style->setThirdPartySetting('tinypng', 'tinypng_compress', $form_state->getValue('tinypng_compress'));
  $image_style->save();
}
