<?php

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_presave().
 *
 * Process the image with TinyPNG service.
 */
function tinypng_entity_presave(EntityInterface $entity) {
  // Handle only newly uploaded images.
  if (
    !$entity->isNew()
    || $entity->getEntityTypeId() != 'file'
    || !empty(file_validate_is_image($entity))
  ) {
    return;
  }

  /** @var \Drupal\file\Entity\File $entity */
  if (!tinypng_is_mime_supported($entity->getMimeType())) {
    return;
  }

  // Skip if no api key is set or OnUpload method is not enabled.
  $api_key = tinypng_api_key();
  $on_upload = tinypng_handle_on_upload();
  if (empty($api_key) || empty($on_upload)) {
    return;
  }

  // Compress image.
  $image_path = $entity->getFileUri();
  \Tinify\setKey($api_key);
  $dest = \Drupal::service('file_system')->realpath($image_path);

  try {
    if (tinypng_on_upload_method() == 'download') {
      $origin = file_create_url($image_path);
      $tinyfy_source = \Tinify\fromUrl($origin);
    }
    else {
      $tinyfy_source = \Tinify\fromFile($dest);
    }

    $res = $tinyfy_source->toFile($dest);
  }
  catch (Exception $ex) {
    \Drupal::logger('tinypng')->error($ex->getMessage());
  }
}

/**
 * Get TinyPNG API key.
 */
function tinypng_api_key() {
  $config = \Drupal::config('tinypng.settings');
  return $config->get('api_key');
}

/**
 * Check ImageAction mode is enabled.
 */
function tinypng_handle_with_image_actions() {
  $config = \Drupal::config('tinypng.settings');
  return (bool) $config->get('image_action');
}

/**
 * Check OnUpload mode is enabled.
 */
function tinypng_handle_on_upload() {
  $config = \Drupal::config('tinypng.settings');
  return (bool) $config->get('on_upload');
}

/**
 * Get OnUpload method.
 */
function tinypng_on_upload_method() {
  $config = \Drupal::config('tinypng.settings');
  return $config->get('upload_method');
}

/**
 * Check mime type is supported.
 */
function tinypng_is_mime_supported($mime) {
  $supported_types = array(
    'image/png',
    'image/jpg',
    'image/jpeg',
  );
  return in_array($mime, $supported_types);
}
